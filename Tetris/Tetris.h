#pragma once

#include "resource.h"
#include "stdafx.h"
#include <mmsystem.h>
#pragma comment(lib, "winmm.lib")
#include <fstream>
#include <cmath>
// 定义一个点，用来表示方块的位置
struct Point{
	int x;
	int y;
};

int nType  = 0;     // 下一方块类型
int type   = 0;		// 当前方块类型
int state  = 0;		// 当前方块状态
int tScore = 1;					// 当前得分
bool gameOverFlag = false;		// 游戏已经结束
bool suspendFlag = false;       // 暂停游戏
bool targetFlag = false; // 启用瞄准器
bool overflowing = false;
bool magicnum = false;
bool winwin = false;
bool musicplay = true;
bool wudi = false;
bool music_switch = false;
// int savedArray[21][20] = {0};
int workRegion [20][10] = {0};	// 工作区数据，data[i][j]==0表示该位置没有被占用
Point point;					// 当前方块的当前位置
Point target;					// 当前方块目标位置，用于瞄准器
Point new_point;                // （用于旋转）
int bricks[7][4][4][4] =
{
	{   // I型方块
		{{0, 0, 0, 0},
		{0, 0, 0, 0},
		{1, 1, 1, 1},
		{0, 0, 0, 0}},

		{{0, 0, 1, 0},
		{0, 0, 1, 0},
		{0, 0, 1, 0},
		{0, 0, 1, 0}},

		{{0, 0, 0, 0},
		{0, 0, 0, 0},
		{1, 1, 1, 1},
		{0, 0, 0, 0}},

		{{0, 0, 1, 0},
		{0, 0, 1, 0},
		{0, 0, 1, 0},
		{0, 0, 1, 0}}
	},
	{   // T型方块
		{{0, 0, 0, 0},
		{0, 0, 2, 0},
		{0, 2, 2, 2},
		{0, 0, 0, 0}},

		{{0, 0, 0, 0},
		{0, 0, 2, 0},
		{0, 0, 2, 2},
		{0, 0, 2, 0}},

		{{0, 0, 0, 0},
		{0, 0, 0, 0},
		{0, 2, 2, 2},
		{0, 0, 2, 0}},

		{{0, 0, 0, 0},
		{0, 0, 2, 0},
		{0, 2, 2, 0},
		{0, 0, 2, 0}},
	},
	{   // L型方块
		{{0, 3, 0, 0},
		{0, 3, 0, 0},
		{0, 3, 3, 0},
		{0, 0, 0, 0}},

		{{0, 0, 0, 0},
		{3, 3, 3, 0},
		{3, 0, 0, 0},
		{0, 0, 0, 0}},	

		{{3, 3, 0, 0},
		{0, 3, 0, 0},
		{0, 3, 0, 0},
		{0, 0, 0, 0}},	

		{{0, 0, 3, 0},
		{3, 3, 3, 0},
		{0, 0, 0, 0},
		{0, 0, 0, 0}}
	},            
	{	// J型方块
		{{0, 0, 4, 0},
		{0, 0, 4, 0},
		{0, 4, 4, 0},
		{0, 0, 0, 0}},

		{{0, 4, 0, 0},
		{0, 4, 4, 4},
		{0, 0, 0, 0},
		{0, 0, 0, 0}},

		{{0, 0, 4, 4},
		{0, 0, 4, 0},
		{0, 0, 4, 0},
		{0, 0, 0, 0}},

		{{0, 0, 0, 0},
		{0, 4, 4, 4},
		{0, 0, 0, 4},
		{0, 0, 0, 0}}
	},			
	{	// O型方块
		{{0, 0, 0, 0},
		{0, 5, 5, 0},
		{0, 5, 5, 0},
		{0, 0, 0, 0}},

		{{0, 0, 0, 0},
		{0, 5, 5, 0},
		{0, 5, 5, 0},
		{0, 0, 0, 0}},

		{{0, 0, 0, 0},
		{0, 5, 5, 0},
		{0, 5, 5, 0},
		{0, 0, 0, 0}},

		{{0, 0, 0, 0},
		{0, 5, 5, 0},
		{0, 5, 5, 0},
		{0, 0, 0, 0}}
	},		
	{   // S型方块
		{{0, 6, 0, 0},
		{0, 6, 6, 0},
		{0, 0, 6, 0},
		{0, 0, 0, 0}},

		{{0, 0, 0, 0},
		{0, 6, 6, 0},
		{6, 6, 0, 0},
		{0, 0, 0, 0}},

		{{6, 0, 0, 0},
		{6, 6, 0, 0},
		{0, 6, 0, 0},
		{0, 0, 0, 0}},

		{{0, 6, 6, 0},
		{6, 6, 0, 0},
		{0, 0, 0, 0},
		{0, 0, 0, 0}}
	},
	{	// Z型方块
		{{0, 0, 7, 0},
		{0, 7, 7, 0},
		{0, 7, 0, 0},
		{0, 0, 0, 0}},

		{{0, 7, 7, 0},
		{0, 0, 7, 7},
		{0, 0, 0, 0},
		{0, 0, 0, 0}},

		{{0, 0, 0, 7},
		{0, 0, 7, 7},
		{0, 0, 7, 0},
		{0, 0, 0, 0}},

		{{0, 0, 0, 0},
		{0, 7, 7, 0},
		{0, 0, 7, 7},
		{0, 0, 0, 0}}
	}		
};

// 定义7种方块的颜色
COLORREF BrickColor[7] = {
	RGB(255, 0, 0),
	RGB(0, 255, 0),
	RGB(0, 0, 255),
	RGB(0, 255, 255),
	RGB(255, 150, 0),
	RGB(255, 255, 0),
	RGB(168, 0, 168)
};

// 配置文件相关

// 判断当前方块是否可以向下移动
bool CanMoveDown();

// 判断当前方块是否可以向左移动
bool CanMoveLeft();

// 判断当前方块是否可以向右移动
bool CanMoveRight();

// 当前方块向下移动
void MoveDown();

// 当前方块向左移动
void MoveLeft();

// 当前方块向右移动
void MoveRight();

// 旋转当前方块
void Rotate();

// 将当前方块直接下落到最下面的位置
void DropDown();

// 将当前方块固定在当前位置
void Fixing();

// 消去一行
void DeleteOneLine(int number);

// 消行操作
void DeleteLines();

// 读档
void readSaved();
// 存档
void saveNow();
// 判断游戏结束
bool GameOver();

// backdoor
bool backdoor(int array[]);

// 计算瞄准器位置
void ComputeTarget();

// 重新开始
void Restart();

// 绘制屏幕
void TDrawScreen(HDC hdc, HWND hWnd);